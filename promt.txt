Реализуйте класс MarsURLEncoder, который будет шифровать и расшифровывать
ссылки.
В классе должно быть два метода:
метод encode() должен получать на вход исходные ссылки и возвращать
зашифрованные, вида https://ma.rs/<hash>;
метод decode() должен принимать зашифрованную ссылку и возвращать исходную.
Пары «зашифрованная ссылка» + «исходная ссылка» должны храниться в словаре.
В конструкторе класса __init__(...) создайте атрибут — хранилище ссылок. Это
должен быть словарь, в котором
ключ — это сгенерированная зашифрованная ссылка
значение — исходная ссылка
Например, если ссылка https://tsup.ru/mars/marsohod-1/01-09-2023/daily_job.html
преобразована в https://ma.rs/X7NYIol, то в словарь должен быть добавлен такой
элемент:

{
    ...,
    'https://ma.rs/X7NYIol': 'https://tsup.ru/mars/marsohod-1/01-09-2023/daily_job.html'
}
Ключом словаря-хранилища может быть не вся зашифрованная ссылка, а только её
хеш-фрагмент:

{
    ...,
    'X7NYIol': 'https://tsup.ru/mars/marsohod-1/01-09-2023/daily_job.html'
}
Выбор варианта — за вами.
К изменяющейся части зашифрованной ссылки особых требований нет — там может
быть любая последовательность букв и цифр — например, из шести символов. Важно,
 чтобы по зашифрованной ссылке можно было восстановить исходную.
Как выполнять работу:
Создать строку с набором символов, которые могут быть в хеше.
Создать словарь, в котором будут храниться пары хеш: исходная ссылка.



Расшифровка ссылки:
Извлечь хеш из полученной ссылки вида https://ma.rs/X7NYIol.
Найти в словаре ключ, соответствующий полученному хешу.
Вернуть значение найденного ключа.
Альтернативные способы решения
Для создания хеша можно применить хеширующие функции из модуля стандартной
библиотеки hashlib. При этом варианте можно обойтись без строки с набором
«разрешённых символов».
Есть и более скучный простой вариант: завести счётчик целых чисел — и каждой
новой ссылке присваивать очередное значение счётчика. Переменная часть ссылки
 будет состоять только из цифр: https://ma.rs/1, https://ma.rs/2... Не особо
 похоже на хеш, но сработает.
Если вы решите задачу каким-то альтернативным способом — решение тоже будет
принято. Главное — чтоб работало!

